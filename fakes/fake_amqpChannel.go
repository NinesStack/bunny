// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/Shimmur/bunny/adapter"
	"github.com/streadway/amqp"
)

type FakeAMQPChannel struct {
	CancelStub        func(string, bool) error
	cancelMutex       sync.RWMutex
	cancelArgsForCall []struct {
		arg1 string
		arg2 bool
	}
	cancelReturns struct {
		result1 error
	}
	cancelReturnsOnCall map[int]struct {
		result1 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	ConsumeStub        func(string, string, bool, bool, bool, bool, amqp.Table) (<-chan amqp.Delivery, error)
	consumeMutex       sync.RWMutex
	consumeArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 bool
		arg4 bool
		arg5 bool
		arg6 bool
		arg7 amqp.Table
	}
	consumeReturns struct {
		result1 <-chan amqp.Delivery
		result2 error
	}
	consumeReturnsOnCall map[int]struct {
		result1 <-chan amqp.Delivery
		result2 error
	}
	PublishStub        func(string, string, bool, bool, amqp.Publishing) error
	publishMutex       sync.RWMutex
	publishArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 bool
		arg4 bool
		arg5 amqp.Publishing
	}
	publishReturns struct {
		result1 error
	}
	publishReturnsOnCall map[int]struct {
		result1 error
	}
	QosStub        func(int, int, bool) error
	qosMutex       sync.RWMutex
	qosArgsForCall []struct {
		arg1 int
		arg2 int
		arg3 bool
	}
	qosReturns struct {
		result1 error
	}
	qosReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAMQPChannel) Cancel(arg1 string, arg2 bool) error {
	fake.cancelMutex.Lock()
	ret, specificReturn := fake.cancelReturnsOnCall[len(fake.cancelArgsForCall)]
	fake.cancelArgsForCall = append(fake.cancelArgsForCall, struct {
		arg1 string
		arg2 bool
	}{arg1, arg2})
	stub := fake.CancelStub
	fakeReturns := fake.cancelReturns
	fake.recordInvocation("Cancel", []interface{}{arg1, arg2})
	fake.cancelMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAMQPChannel) CancelCallCount() int {
	fake.cancelMutex.RLock()
	defer fake.cancelMutex.RUnlock()
	return len(fake.cancelArgsForCall)
}

func (fake *FakeAMQPChannel) CancelCalls(stub func(string, bool) error) {
	fake.cancelMutex.Lock()
	defer fake.cancelMutex.Unlock()
	fake.CancelStub = stub
}

func (fake *FakeAMQPChannel) CancelArgsForCall(i int) (string, bool) {
	fake.cancelMutex.RLock()
	defer fake.cancelMutex.RUnlock()
	argsForCall := fake.cancelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAMQPChannel) CancelReturns(result1 error) {
	fake.cancelMutex.Lock()
	defer fake.cancelMutex.Unlock()
	fake.CancelStub = nil
	fake.cancelReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAMQPChannel) CancelReturnsOnCall(i int, result1 error) {
	fake.cancelMutex.Lock()
	defer fake.cancelMutex.Unlock()
	fake.CancelStub = nil
	if fake.cancelReturnsOnCall == nil {
		fake.cancelReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cancelReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAMQPChannel) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAMQPChannel) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeAMQPChannel) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeAMQPChannel) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAMQPChannel) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAMQPChannel) Consume(arg1 string, arg2 string, arg3 bool, arg4 bool, arg5 bool, arg6 bool, arg7 amqp.Table) (<-chan amqp.Delivery, error) {
	fake.consumeMutex.Lock()
	ret, specificReturn := fake.consumeReturnsOnCall[len(fake.consumeArgsForCall)]
	fake.consumeArgsForCall = append(fake.consumeArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 bool
		arg4 bool
		arg5 bool
		arg6 bool
		arg7 amqp.Table
	}{arg1, arg2, arg3, arg4, arg5, arg6, arg7})
	stub := fake.ConsumeStub
	fakeReturns := fake.consumeReturns
	fake.recordInvocation("Consume", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6, arg7})
	fake.consumeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAMQPChannel) ConsumeCallCount() int {
	fake.consumeMutex.RLock()
	defer fake.consumeMutex.RUnlock()
	return len(fake.consumeArgsForCall)
}

func (fake *FakeAMQPChannel) ConsumeCalls(stub func(string, string, bool, bool, bool, bool, amqp.Table) (<-chan amqp.Delivery, error)) {
	fake.consumeMutex.Lock()
	defer fake.consumeMutex.Unlock()
	fake.ConsumeStub = stub
}

func (fake *FakeAMQPChannel) ConsumeArgsForCall(i int) (string, string, bool, bool, bool, bool, amqp.Table) {
	fake.consumeMutex.RLock()
	defer fake.consumeMutex.RUnlock()
	argsForCall := fake.consumeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7
}

func (fake *FakeAMQPChannel) ConsumeReturns(result1 <-chan amqp.Delivery, result2 error) {
	fake.consumeMutex.Lock()
	defer fake.consumeMutex.Unlock()
	fake.ConsumeStub = nil
	fake.consumeReturns = struct {
		result1 <-chan amqp.Delivery
		result2 error
	}{result1, result2}
}

func (fake *FakeAMQPChannel) ConsumeReturnsOnCall(i int, result1 <-chan amqp.Delivery, result2 error) {
	fake.consumeMutex.Lock()
	defer fake.consumeMutex.Unlock()
	fake.ConsumeStub = nil
	if fake.consumeReturnsOnCall == nil {
		fake.consumeReturnsOnCall = make(map[int]struct {
			result1 <-chan amqp.Delivery
			result2 error
		})
	}
	fake.consumeReturnsOnCall[i] = struct {
		result1 <-chan amqp.Delivery
		result2 error
	}{result1, result2}
}

func (fake *FakeAMQPChannel) Publish(arg1 string, arg2 string, arg3 bool, arg4 bool, arg5 amqp.Publishing) error {
	fake.publishMutex.Lock()
	ret, specificReturn := fake.publishReturnsOnCall[len(fake.publishArgsForCall)]
	fake.publishArgsForCall = append(fake.publishArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 bool
		arg4 bool
		arg5 amqp.Publishing
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.PublishStub
	fakeReturns := fake.publishReturns
	fake.recordInvocation("Publish", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.publishMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAMQPChannel) PublishCallCount() int {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return len(fake.publishArgsForCall)
}

func (fake *FakeAMQPChannel) PublishCalls(stub func(string, string, bool, bool, amqp.Publishing) error) {
	fake.publishMutex.Lock()
	defer fake.publishMutex.Unlock()
	fake.PublishStub = stub
}

func (fake *FakeAMQPChannel) PublishArgsForCall(i int) (string, string, bool, bool, amqp.Publishing) {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	argsForCall := fake.publishArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeAMQPChannel) PublishReturns(result1 error) {
	fake.publishMutex.Lock()
	defer fake.publishMutex.Unlock()
	fake.PublishStub = nil
	fake.publishReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAMQPChannel) PublishReturnsOnCall(i int, result1 error) {
	fake.publishMutex.Lock()
	defer fake.publishMutex.Unlock()
	fake.PublishStub = nil
	if fake.publishReturnsOnCall == nil {
		fake.publishReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.publishReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAMQPChannel) Qos(arg1 int, arg2 int, arg3 bool) error {
	fake.qosMutex.Lock()
	ret, specificReturn := fake.qosReturnsOnCall[len(fake.qosArgsForCall)]
	fake.qosArgsForCall = append(fake.qosArgsForCall, struct {
		arg1 int
		arg2 int
		arg3 bool
	}{arg1, arg2, arg3})
	stub := fake.QosStub
	fakeReturns := fake.qosReturns
	fake.recordInvocation("Qos", []interface{}{arg1, arg2, arg3})
	fake.qosMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAMQPChannel) QosCallCount() int {
	fake.qosMutex.RLock()
	defer fake.qosMutex.RUnlock()
	return len(fake.qosArgsForCall)
}

func (fake *FakeAMQPChannel) QosCalls(stub func(int, int, bool) error) {
	fake.qosMutex.Lock()
	defer fake.qosMutex.Unlock()
	fake.QosStub = stub
}

func (fake *FakeAMQPChannel) QosArgsForCall(i int) (int, int, bool) {
	fake.qosMutex.RLock()
	defer fake.qosMutex.RUnlock()
	argsForCall := fake.qosArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAMQPChannel) QosReturns(result1 error) {
	fake.qosMutex.Lock()
	defer fake.qosMutex.Unlock()
	fake.QosStub = nil
	fake.qosReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAMQPChannel) QosReturnsOnCall(i int, result1 error) {
	fake.qosMutex.Lock()
	defer fake.qosMutex.Unlock()
	fake.QosStub = nil
	if fake.qosReturnsOnCall == nil {
		fake.qosReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.qosReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAMQPChannel) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cancelMutex.RLock()
	defer fake.cancelMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.consumeMutex.RLock()
	defer fake.consumeMutex.RUnlock()
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	fake.qosMutex.RLock()
	defer fake.qosMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAMQPChannel) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ adapter.AMQPChannel = new(FakeAMQPChannel)
