// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"crypto/tls"
	"sync"

	"github.com/Shimmur/bunny/adapter"
)

type FakeAMQPDialer struct {
	DialStub        func(string, *tls.Config) (adapter.AMQPConnection, error)
	dialMutex       sync.RWMutex
	dialArgsForCall []struct {
		arg1 string
		arg2 *tls.Config
	}
	dialReturns struct {
		result1 adapter.AMQPConnection
		result2 error
	}
	dialReturnsOnCall map[int]struct {
		result1 adapter.AMQPConnection
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAMQPDialer) Dial(arg1 string, arg2 *tls.Config) (adapter.AMQPConnection, error) {
	fake.dialMutex.Lock()
	ret, specificReturn := fake.dialReturnsOnCall[len(fake.dialArgsForCall)]
	fake.dialArgsForCall = append(fake.dialArgsForCall, struct {
		arg1 string
		arg2 *tls.Config
	}{arg1, arg2})
	stub := fake.DialStub
	fakeReturns := fake.dialReturns
	fake.recordInvocation("Dial", []interface{}{arg1, arg2})
	fake.dialMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAMQPDialer) DialCallCount() int {
	fake.dialMutex.RLock()
	defer fake.dialMutex.RUnlock()
	return len(fake.dialArgsForCall)
}

func (fake *FakeAMQPDialer) DialCalls(stub func(string, *tls.Config) (adapter.AMQPConnection, error)) {
	fake.dialMutex.Lock()
	defer fake.dialMutex.Unlock()
	fake.DialStub = stub
}

func (fake *FakeAMQPDialer) DialArgsForCall(i int) (string, *tls.Config) {
	fake.dialMutex.RLock()
	defer fake.dialMutex.RUnlock()
	argsForCall := fake.dialArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAMQPDialer) DialReturns(result1 adapter.AMQPConnection, result2 error) {
	fake.dialMutex.Lock()
	defer fake.dialMutex.Unlock()
	fake.DialStub = nil
	fake.dialReturns = struct {
		result1 adapter.AMQPConnection
		result2 error
	}{result1, result2}
}

func (fake *FakeAMQPDialer) DialReturnsOnCall(i int, result1 adapter.AMQPConnection, result2 error) {
	fake.dialMutex.Lock()
	defer fake.dialMutex.Unlock()
	fake.DialStub = nil
	if fake.dialReturnsOnCall == nil {
		fake.dialReturnsOnCall = make(map[int]struct {
			result1 adapter.AMQPConnection
			result2 error
		})
	}
	fake.dialReturnsOnCall[i] = struct {
		result1 adapter.AMQPConnection
		result2 error
	}{result1, result2}
}

func (fake *FakeAMQPDialer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.dialMutex.RLock()
	defer fake.dialMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAMQPDialer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ adapter.AMQPDialer = new(FakeAMQPDialer)
